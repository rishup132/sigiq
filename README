# SigIQ WebSocket Service – Production-Ready Backend (WIP)

This project focused on implementing a production-ready WebSocket service using Django, Channels, and Docker.

---

## Tech Stack

- Django 4.2
- Django Channels 4.x
- Uvicorn ASGI server
- Python 3.11
- Docker + Docker Compose

---

## How to Run (Dev)

1. **Clone the repository**:
```bash
git clone <your-repo-url>
cd sigiq_ws_project
```

2. **Build & Run Docker**:
```bash
cd docker
docker compose -f compose.yml up --build
```

3. **Access in Browser**: http://localhost:8000

4. **WebSocket Endpoin**t**: /ws/chat/

## Testing WebSocket

### Method 1: Using wscat (CLI)

1.	Install wscat (if not already):
```bash
npm install -g wscat
```

2.	Connect to the WebSocket server:
```bash
wscat -c ws://localhost:8000/ws/chat/
```
3.	Try sending messages:
```bash
> hello
< {"count": 1}
> test
< {"count": 2}
```

4.	Press Ctrl+C to disconnect.

⸻

### Method 2: Using Browser Developer Tools
1.	Open Chrome and press F12 to open DevTools.

2.	Go to the Console tab and run:
```javascript
const ws = new WebSocket("ws://localhost:8000/ws/chat/");
ws.onmessage = (e) => console.log("Message:", e.data);
ws.onopen = () => {
  ws.send("first");
  ws.send("second");
};
```

3.	You should see:
```javascript
Message: {"count": 1}
Message: {"count": 2}
```

4.	Close the connection:
```javascript
ws.close(1000, "closing");
```